<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://guojiechang.github.io//</id><title>Jiechang Guo</title><subtitle>Keeping recording every bit of my coding life</subtitle> <updated>2023-12-07T11:34:31-06:00</updated> <author> <name>Jiechang Guo</name> <uri>https://guojiechang.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://guojiechang.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://guojiechang.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Jiechang Guo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Hello World of Three.js</title><link href="https://guojiechang.github.io//posts/hello-world-of-three-js/" rel="alternate" type="text/html" title="Hello World of Three.js" /><published>2023-12-06T15:48:00-06:00</published> <updated>2023-12-06T15:48:00-06:00</updated> <id>https://guojiechang.github.io//posts/hello-world-of-three-js/</id> <content src="https://guojiechang.github.io//posts/hello-world-of-three-js/" /> <author> <name>Jiechang Guo</name> </author> <summary> This is the demo I created when learning Three.js. three.js with jekyll post I finally figured out how to embed HTML with three.js in a markdown file. The HTML file looks like this. Created a js folder inside assets, and put the javascript file inside it. &amp;lt;style&amp;gt; .threejs { position: relative; width: 100%; padding-top: 56.25%; /* 16:9 aspect ratio */ } .threejs ... </summary> </entry> <entry><title>Learn WebGL Demo</title><link href="https://guojiechang.github.io//posts/learn-webgl-demo/" rel="alternate" type="text/html" title="Learn WebGL Demo" /><published>2023-10-11T10:31:00-05:00</published> <updated>2023-10-11T10:31:00-05:00</updated> <id>https://guojiechang.github.io//posts/learn-webgl-demo/</id> <content src="https://guojiechang.github.io//posts/learn-webgl-demo/" /> <author> <name>Jiechang Guo</name> </author> <summary> This is the demo I created when learning WebGL. </summary> </entry> <entry><title>Drawing a triangle using Vulkan (1)</title><link href="https://guojiechang.github.io//posts/drawing-a-triangle-1/" rel="alternate" type="text/html" title="Drawing a triangle using Vulkan (1)" /><published>2023-09-13T14:33:00-05:00</published> <updated>2023-09-13T14:33:00-05:00</updated> <id>https://guojiechang.github.io//posts/drawing-a-triangle-1/</id> <content src="https://guojiechang.github.io//posts/drawing-a-triangle-1/" /> <author> <name>Jiechang Guo</name> </author> <category term="CG_Notes" /> <summary> After writing or copying over 1000 lines of code, I finally rendered my first triangle using Vulkan. Seeing it on the screen was so exciting! I want to learn Vulkan to study state-of-the-art techniques in the field of computer graphics. I find the process of learning new techniques enjoyable, which makes me feel refreshed and positive. Application outline The base code is simple. Basically... </summary> </entry> <entry><title>Android Studio Giraffe + Kotlin + OpenCV 4.8.0</title><link href="https://guojiechang.github.io//posts/android-studio-giraffe-kotlin-opencv-4-8-0/" rel="alternate" type="text/html" title="Android Studio Giraffe + Kotlin + OpenCV 4.8.0" /><published>2023-09-07T13:22:00-05:00</published> <updated>2023-09-13T14:45:31-05:00</updated> <id>https://guojiechang.github.io//posts/android-studio-giraffe-kotlin-opencv-4-8-0/</id> <content src="https://guojiechang.github.io//posts/android-studio-giraffe-kotlin-opencv-4-8-0/" /> <author> <name>Jiechang Guo</name> </author> <summary> After hours of attempting, I finally integrated OpenCV 4.8.0 to Android Studio Giraffe with the Kotlin project. I’ll skip the steps for downloading AS and OpenCV. Just remember to download the Android version of OpenCV and extract the zipped file to whatever place you want. Create a new “Empty Activity” project I want to use Compose to develop the UI of the app. Currently, I only learned thi... </summary> </entry> <entry><title>Training on FLIC Dataset with Limited Memory in Tensorflow</title><link href="https://guojiechang.github.io//posts/training-on-flic-dataset-with-limited-memory-in-tensorflow/" rel="alternate" type="text/html" title="Training on FLIC Dataset with Limited Memory in Tensorflow" /><published>2023-03-28T10:38:00-05:00</published> <updated>2023-03-28T10:38:00-05:00</updated> <id>https://guojiechang.github.io//posts/training-on-flic-dataset-with-limited-memory-in-tensorflow/</id> <content src="https://guojiechang.github.io//posts/training-on-flic-dataset-with-limited-memory-in-tensorflow/" /> <author> <name>Jiechang Guo</name> </author> <category term="CV_Notes" /> <summary> Introduction I attempted to run the code from the joint_cnn_mrf, which is the first and only implementation of the paper “Joint Training of a Convolutional Network and a Graphical Model for Human Pose Estimation.” However, I encountered several challenges due to the version difference between Tensorflow 1.x and Tensorflow 2.x, as well as memory limitations. The code requires loading the entire ... </summary> </entry> </feed>
